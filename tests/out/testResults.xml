<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="162" errors="0" failures="27" not-run="0" inconclusive="0" ignored="0" skipped="2" invalid="0" date="2024-11-15" time="18:12:31">
  <environment user="Owner" machine-name="JLA-LOFTHTPC" clr-version="8.0.4" cwd="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests" user-domain="JLA-LoftHTPC" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition2" nunit-version="2.5.8.0" os-version="10.0.19044" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="5.0915" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Function.tests.ps1" executed="True" result="Success" success="True" time="1.4604" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Function.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="function 'Get-ParamStringMap.ps1'" executed="True" result="Success" success="True" time="0.2747" asserts="0" description="function 'Get-ParamStringMap.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ParamStringMap.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.162" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ParamStringMap.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\private\Get-ParamStringMap.ps1&quot;)" time="0.162" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ParamStringMap.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0598" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ParamStringMap.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\private\Get-ParamStringMap.ps1&quot;)" time="0.0598" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-ParamValueString.ps1'" executed="True" result="Success" success="True" time="0.309" asserts="0" description="function 'Get-ParamValueString.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ParamValueString.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0065" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ParamValueString.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\private\Get-ParamValueString.ps1&quot;)" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ParamValueString.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0144" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ParamValueString.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\private\Get-ParamValueString.ps1&quot;)" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-DnsFqdn.ps1'" executed="True" result="Success" success="True" time="0.3533" asserts="0" description="function 'ConvertTo-DnsFqdn.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-DnsFqdn.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0214" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-DnsFqdn.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\ConvertTo-DnsFqdn.ps1&quot;)" time="0.0214" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-DnsFqdn.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0134" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-DnsFqdn.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\ConvertTo-DnsFqdn.ps1&quot;)" time="0.0134" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PSCodeString.ps1'" executed="True" result="Success" success="True" time="0.3953" asserts="0" description="function 'ConvertTo-PSCodeString.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PSCodeString.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0111" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PSCodeString.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\ConvertTo-PSCodeString.ps1&quot;)" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PSCodeString.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0123" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PSCodeString.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\ConvertTo-PSCodeString.ps1&quot;)" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Export-LogCsv.ps1'" executed="True" result="Success" success="True" time="0.4537" asserts="0" description="function 'Export-LogCsv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Export-LogCsv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0187" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Export-LogCsv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Export-LogCsv.ps1&quot;)" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Export-LogCsv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.029" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Export-LogCsv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Export-LogCsv.ps1&quot;)" time="0.029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CurrentHostname.ps1'" executed="True" result="Success" success="True" time="0.5786" asserts="0" description="function 'Get-CurrentHostname.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CurrentHostname.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0557" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CurrentHostname.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Get-CurrentHostname.ps1&quot;)" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CurrentHostname.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0492" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CurrentHostname.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Get-CurrentHostname.ps1&quot;)" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CurrentWhoAmI.ps1'" executed="True" result="Success" success="True" time="0.6418" asserts="0" description="function 'Get-CurrentWhoAmI.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CurrentWhoAmI.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0223" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CurrentWhoAmI.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Get-CurrentWhoAmI.ps1&quot;)" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CurrentWhoAmI.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0258" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CurrentWhoAmI.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Get-CurrentWhoAmI.ps1&quot;)" time="0.0258" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'New-DatedSubfolder.ps1'" executed="True" result="Success" success="True" time="0.7099" asserts="0" description="function 'New-DatedSubfolder.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'New-DatedSubfolder.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.038" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'New-DatedSubfolder.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\New-DatedSubfolder.ps1&quot;)" time="0.038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'New-DatedSubfolder.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0148" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'New-DatedSubfolder.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\New-DatedSubfolder.ps1&quot;)" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Write-LogMsg.ps1'" executed="True" result="Success" success="True" time="0.7915" asserts="0" description="function 'Write-LogMsg.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Write-LogMsg.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.05" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Write-LogMsg.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Write-LogMsg.ps1&quot;)" time="0.05" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Write-LogMsg.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0173" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Write-LogMsg.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\src\functions\public\Write-LogMsg.ps1&quot;)" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1" executed="True" result="Failure" success="False" time="2.6252" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn" executed="True" result="Failure" success="False" time="0.604" asserts="0" description="help for ConvertTo-DnsFqdn">
            <results>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ComputerName'" executed="True" result="Failure" success="False" time="0.2001" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'ComputerName'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ComputerName'.has a description" time="0.0134" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ComputerName'.has the correct [mandatory] value" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ComputerName'.has the correct parameter type" time="0.108" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'DebugOutputStream'" executed="True" result="Failure" success="False" time="0.2387" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'DebugOutputStream'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'DebugOutputStream'.has a description" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'DebugOutputStream'.has the correct [mandatory] value" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'DebugOutputStream'.has the correct parameter type" time="0.0173" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'LogBuffer'" executed="True" result="Failure" success="False" time="0.2818" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'LogBuffer'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'LogBuffer'.has a description" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'LogBuffer'.has the correct [mandatory] value" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'LogBuffer'.has the correct parameter type" time="0.0119" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 11
Actual length:   40
Strings differ at index 0.
Expected: 'PSReference'
But was:  'System.Management.Automation.PSReference'
           ^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ProgressAction'" executed="True" result="Failure" success="False" time="0.4216" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'ProgressAction'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ProgressAction'.has a description" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ProgressAction'.has the correct [mandatory] value" time="0.1012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ProgressAction'.has the correct parameter type" time="0.0179" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 16
Actual length:   45
Strings differ at index 0.
Expected: 'ActionPreference'
But was:  'System.Management.Automation.ActionPreference'
           ^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ThisHostName'" executed="True" result="Failure" success="False" time="0.4845" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'ThisHostName'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ThisHostName'.has a description" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ThisHostName'.has the correct [mandatory] value" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'ThisHostName'.has the correct parameter type" time="0.0227" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-DnsFqdn.- Help for parameter 'WhoAmI'" executed="True" result="Failure" success="False" time="0.5664" asserts="0" description="help for ConvertTo-DnsFqdn.- Help for parameter 'WhoAmI'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-DnsFqdn.- Help for parameter 'WhoAmI'.has a description" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-DnsFqdn.- Help for parameter 'WhoAmI'.has the correct [mandatory] value" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-DnsFqdn.- Help for parameter 'WhoAmI'.has the correct parameter type" time="0.0299" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for ConvertTo-DnsFqdn.is not auto-generated" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for ConvertTo-DnsFqdn.has a description" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for ConvertTo-DnsFqdn.has example code" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example help" name="help for ConvertTo-DnsFqdn.has example help" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for ConvertTo-PSCodeString" executed="True" result="Failure" success="False" time="0.8762" asserts="0" description="help for ConvertTo-PSCodeString">
            <results>
              <test-suite type="TestFixture" name="help for ConvertTo-PSCodeString.- Help for parameter 'InputObject'" executed="True" result="Success" success="True" time="0.1275" asserts="0" description="help for ConvertTo-PSCodeString.- Help for parameter 'InputObject'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-PSCodeString.- Help for parameter 'InputObject'.has a description" time="0.0205" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-PSCodeString.- Help for parameter 'InputObject'.has the correct [mandatory] value" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for ConvertTo-PSCodeString.- Help for parameter 'InputObject'.has the correct parameter type" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for ConvertTo-PSCodeString.- Help for parameter 'ProgressAction'" executed="True" result="Failure" success="False" time="0.2344" asserts="0" description="help for ConvertTo-PSCodeString.- Help for parameter 'ProgressAction'">
                <results>
                  <test-case description="has a description" name="help for ConvertTo-PSCodeString.- Help for parameter 'ProgressAction'.has a description" time="0.0327" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected a value, but got $null or empty.</message>
                      <stack-trace>at $parameterHelp.Description.Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct [mandatory] value" name="help for ConvertTo-PSCodeString.- Help for parameter 'ProgressAction'.has the correct [mandatory] value" time="0.0388" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'False', but got $null.</message>
                      <stack-trace>at $parameterHelp.Required | Should -Be $codeMandatory, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct parameter type" name="help for ConvertTo-PSCodeString.- Help for parameter 'ProgressAction'.has the correct parameter type" time="0.0195" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'ActionPreference', but got $null.</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for ConvertTo-PSCodeString.is not auto-generated" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for ConvertTo-PSCodeString.has a description" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for ConvertTo-PSCodeString.has example code" time="0.028" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example | Select-Object -First 1).Code | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80</stack-trace>
                </failure>
              </test-case>
              <test-case description="has example help" name="help for ConvertTo-PSCodeString.has example help" time="0.0289" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example.Remarks | Select-Object -First 1).Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for Export-LogCsv" executed="True" result="Failure" success="False" time="1.2609" asserts="0" description="help for Export-LogCsv">
            <results>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'Buffer'" executed="True" result="Success" success="True" time="0.1001" asserts="0" description="help for Export-LogCsv.- Help for parameter 'Buffer'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'Buffer'.has a description" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'Buffer'.has the correct [mandatory] value" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'Buffer'.has the correct parameter type" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'DebugOutputStream'" executed="True" result="Success" success="True" time="0.1355" asserts="0" description="help for Export-LogCsv.- Help for parameter 'DebugOutputStream'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'DebugOutputStream'.has a description" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'DebugOutputStream'.has the correct [mandatory] value" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'DebugOutputStream'.has the correct parameter type" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'LogFile'" executed="True" result="Success" success="True" time="0.1838" asserts="0" description="help for Export-LogCsv.- Help for parameter 'LogFile'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'LogFile'.has a description" time="0.0182" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'LogFile'.has the correct [mandatory] value" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'LogFile'.has the correct parameter type" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'ProgressAction'" executed="True" result="Failure" success="False" time="0.2414" asserts="0" description="help for Export-LogCsv.- Help for parameter 'ProgressAction'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'ProgressAction'.has a description" time="0.0127" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected a value, but got $null or empty.</message>
                      <stack-trace>at $parameterHelp.Description.Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'ProgressAction'.has the correct [mandatory] value" time="0.0169" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'False', but got $null.</message>
                      <stack-trace>at $parameterHelp.Required | Should -Be $codeMandatory, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'ProgressAction'.has the correct parameter type" time="0.0193" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'ActionPreference', but got $null.</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'ProgressParentId'" executed="True" result="Success" success="True" time="0.2852" asserts="0" description="help for Export-LogCsv.- Help for parameter 'ProgressParentId'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'ProgressParentId'.has a description" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'ProgressParentId'.has the correct [mandatory] value" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'ProgressParentId'.has the correct parameter type" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'ThisHostName'" executed="True" result="Success" success="True" time="0.3218" asserts="0" description="help for Export-LogCsv.- Help for parameter 'ThisHostName'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'ThisHostName'.has a description" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'ThisHostName'.has the correct [mandatory] value" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'ThisHostName'.has the correct parameter type" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Export-LogCsv.- Help for parameter 'WhoAmI'" executed="True" result="Success" success="True" time="0.3496" asserts="0" description="help for Export-LogCsv.- Help for parameter 'WhoAmI'">
                <results>
                  <test-case description="has a description" name="help for Export-LogCsv.- Help for parameter 'WhoAmI'.has a description" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Export-LogCsv.- Help for parameter 'WhoAmI'.has the correct [mandatory] value" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Export-LogCsv.- Help for parameter 'WhoAmI'.has the correct parameter type" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for Export-LogCsv.is not auto-generated" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for Export-LogCsv.has a description" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for Export-LogCsv.has example code" time="0.0199" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example | Select-Object -First 1).Code | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80</stack-trace>
                </failure>
              </test-case>
              <test-case description="has example help" name="help for Export-LogCsv.has example help" time="0.0149" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example.Remarks | Select-Object -First 1).Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for Get-CurrentHostName" executed="True" result="Success" success="True" time="1.3205" asserts="0" description="help for Get-CurrentHostName">
            <results>
              <test-case description="is not auto-generated" name="help for Get-CurrentHostName.is not auto-generated" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for Get-CurrentHostName.has a description" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for Get-CurrentHostName.has example code" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example help" name="help for Get-CurrentHostName.has example help" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for Get-CurrentWhoAmI" executed="True" result="Failure" success="False" time="1.4998" asserts="0" description="help for Get-CurrentWhoAmI">
            <results>
              <test-suite type="TestFixture" name="help for Get-CurrentWhoAmI.- Help for parameter 'ThisHostName'" executed="True" result="Failure" success="False" time="0.0921" asserts="0" description="help for Get-CurrentWhoAmI.- Help for parameter 'ThisHostName'">
                <results>
                  <test-case description="has a description" name="help for Get-CurrentWhoAmI.- Help for parameter 'ThisHostName'.has a description" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Get-CurrentWhoAmI.- Help for parameter 'ThisHostName'.has the correct [mandatory] value" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Get-CurrentWhoAmI.- Help for parameter 'ThisHostName'.has the correct parameter type" time="0.027" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Get-CurrentWhoAmI.- Help for parameter 'WhoAmI'" executed="True" result="Failure" success="False" time="0.1528" asserts="0" description="help for Get-CurrentWhoAmI.- Help for parameter 'WhoAmI'">
                <results>
                  <test-case description="has a description" name="help for Get-CurrentWhoAmI.- Help for parameter 'WhoAmI'.has a description" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Get-CurrentWhoAmI.- Help for parameter 'WhoAmI'.has the correct [mandatory] value" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Get-CurrentWhoAmI.- Help for parameter 'WhoAmI'.has the correct parameter type" time="0.0164" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for Get-CurrentWhoAmI.is not auto-generated" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for Get-CurrentWhoAmI.has a description" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for Get-CurrentWhoAmI.has example code" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example help" name="help for Get-CurrentWhoAmI.has example help" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for New-DatedSubfolder" executed="True" result="Failure" success="False" time="1.8069" asserts="0" description="help for New-DatedSubfolder">
            <results>
              <test-suite type="TestFixture" name="help for New-DatedSubfolder.- Help for parameter 'ProgressAction'" executed="True" result="Failure" success="False" time="0.1679" asserts="0" description="help for New-DatedSubfolder.- Help for parameter 'ProgressAction'">
                <results>
                  <test-case description="has a description" name="help for New-DatedSubfolder.- Help for parameter 'ProgressAction'.has a description" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for New-DatedSubfolder.- Help for parameter 'ProgressAction'.has the correct [mandatory] value" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for New-DatedSubfolder.- Help for parameter 'ProgressAction'.has the correct parameter type" time="0.0213" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 16
Actual length:   45
Strings differ at index 0.
Expected: 'ActionPreference'
But was:  'System.Management.Automation.ActionPreference'
           ^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for New-DatedSubfolder.- Help for parameter 'Root'" executed="True" result="Failure" success="False" time="0.2283" asserts="0" description="help for New-DatedSubfolder.- Help for parameter 'Root'">
                <results>
                  <test-case description="has a description" name="help for New-DatedSubfolder.- Help for parameter 'Root'.has a description" time="0.0209" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for New-DatedSubfolder.- Help for parameter 'Root'.has the correct [mandatory] value" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for New-DatedSubfolder.- Help for parameter 'Root'.has the correct parameter type" time="0.0165" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for New-DatedSubfolder.- Help for parameter 'Suffix'" executed="True" result="Failure" success="False" time="0.288" asserts="0" description="help for New-DatedSubfolder.- Help for parameter 'Suffix'">
                <results>
                  <test-case description="has a description" name="help for New-DatedSubfolder.- Help for parameter 'Suffix'.has a description" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for New-DatedSubfolder.- Help for parameter 'Suffix'.has the correct [mandatory] value" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for New-DatedSubfolder.- Help for parameter 'Suffix'.has the correct parameter type" time="0.0161" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected strings to be the same, but they were different.
Expected length: 6
Actual length:   13
Strings differ at index 1.
Expected: 'String'
But was:  'System.String'
           -^</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for New-DatedSubfolder.is not auto-generated" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for New-DatedSubfolder.has a description" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for New-DatedSubfolder.has example code" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example help" name="help for New-DatedSubfolder.has example help" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="help for Write-LogMsg" executed="True" result="Failure" success="False" time="2.3555" asserts="0" description="help for Write-LogMsg">
            <results>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'AddPrefix'" executed="True" result="Success" success="True" time="0.0924" asserts="0" description="help for Write-LogMsg.- Help for parameter 'AddPrefix'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'AddPrefix'.has a description" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'AddPrefix'.has the correct [mandatory] value" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'AddPrefix'.has the correct parameter type" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'Buffer'" executed="True" result="Success" success="True" time="0.1275" asserts="0" description="help for Write-LogMsg.- Help for parameter 'Buffer'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'Buffer'.has a description" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'Buffer'.has the correct [mandatory] value" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'Buffer'.has the correct parameter type" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'Expand'" executed="True" result="Success" success="True" time="0.1677" asserts="0" description="help for Write-LogMsg.- Help for parameter 'Expand'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'Expand'.has a description" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'Expand'.has the correct [mandatory] value" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'Expand'.has the correct parameter type" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'ExpandKeyMap'" executed="True" result="Success" success="True" time="0.2088" asserts="0" description="help for Write-LogMsg.- Help for parameter 'ExpandKeyMap'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'ExpandKeyMap'.has a description" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'ExpandKeyMap'.has the correct [mandatory] value" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'ExpandKeyMap'.has the correct parameter type" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'LogFile'" executed="True" result="Success" success="True" time="0.2364" asserts="0" description="help for Write-LogMsg.- Help for parameter 'LogFile'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'LogFile'.has a description" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'LogFile'.has the correct [mandatory] value" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'LogFile'.has the correct parameter type" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'ParamStringMap'" executed="True" result="Failure" success="False" time="0.2769" asserts="0" description="help for Write-LogMsg.- Help for parameter 'ParamStringMap'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'ParamStringMap'.has a description" time="0.0167" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected a value, but got $null or empty.</message>
                      <stack-trace>at $parameterHelp.Description.Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'ParamStringMap'.has the correct [mandatory] value" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'ParamStringMap'.has the correct parameter type" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'PassThru'" executed="True" result="Success" success="True" time="0.3128" asserts="0" description="help for Write-LogMsg.- Help for parameter 'PassThru'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'PassThru'.has a description" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'PassThru'.has the correct [mandatory] value" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'PassThru'.has the correct parameter type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'ProgressAction'" executed="True" result="Failure" success="False" time="0.3668" asserts="0" description="help for Write-LogMsg.- Help for parameter 'ProgressAction'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'ProgressAction'.has a description" time="0.0113" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected a value, but got $null or empty.</message>
                      <stack-trace>at $parameterHelp.Description.Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:103</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'ProgressAction'.has the correct [mandatory] value" time="0.019" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'False', but got $null.</message>
                      <stack-trace>at $parameterHelp.Required | Should -Be $codeMandatory, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:109</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'ProgressAction'.has the correct parameter type" time="0.0125" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 'ActionPreference', but got $null.</message>
                      <stack-trace>at $parameterHelpType | Should -Be $parameter.ParameterType.Name, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:114</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'Suffix'" executed="True" result="Success" success="True" time="0.3978" asserts="0" description="help for Write-LogMsg.- Help for parameter 'Suffix'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'Suffix'.has a description" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'Suffix'.has the correct [mandatory] value" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'Suffix'.has the correct parameter type" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'Text'" executed="True" result="Success" success="True" time="0.4256" asserts="0" description="help for Write-LogMsg.- Help for parameter 'Text'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'Text'.has a description" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'Text'.has the correct [mandatory] value" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'Text'.has the correct parameter type" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'ThisHostname'" executed="True" result="Success" success="True" time="0.4628" asserts="0" description="help for Write-LogMsg.- Help for parameter 'ThisHostname'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'ThisHostname'.has a description" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'ThisHostname'.has the correct [mandatory] value" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'ThisHostname'.has the correct parameter type" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'Type'" executed="True" result="Success" success="True" time="0.4951" asserts="0" description="help for Write-LogMsg.- Help for parameter 'Type'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'Type'.has a description" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'Type'.has the correct [mandatory] value" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'Type'.has the correct parameter type" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="help for Write-LogMsg.- Help for parameter 'WhoAmI'" executed="True" result="Success" success="True" time="0.5233" asserts="0" description="help for Write-LogMsg.- Help for parameter 'WhoAmI'">
                <results>
                  <test-case description="has a description" name="help for Write-LogMsg.- Help for parameter 'WhoAmI'.has a description" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct [mandatory] value" name="help for Write-LogMsg.- Help for parameter 'WhoAmI'.has the correct [mandatory] value" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the correct parameter type" name="help for Write-LogMsg.- Help for parameter 'WhoAmI'.has the correct parameter type" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="is not auto-generated" name="help for Write-LogMsg.is not auto-generated" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has a description" name="help for Write-LogMsg.has a description" time="0.004" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="has example code" name="help for Write-LogMsg.has example code" time="0.0151" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example | Select-Object -First 1).Code | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:80</stack-trace>
                </failure>
              </test-case>
              <test-case description="has example help" name="help for Write-LogMsg.has example help" time="0.0146" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected a value, but got $null or empty.</message>
                  <stack-trace>at ($commandHelp.Examples.Example.Remarks | Select-Object -First 1).Text | Should -Not -BeNullOrEmpty, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Help.tests.ps1:85</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Manifest.tests.ps1" executed="True" result="Ignored" success="True" time="0.3667" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Manifest.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="module manifest 'PsLogMessage.psd1'" executed="True" result="Success" success="True" time="0.1052" asserts="0" description="module manifest 'PsLogMessage.psd1'">
            <results>
              <test-suite type="TestFixture" name="module manifest 'PsLogMessage.psd1'.- Validation" executed="True" result="Success" success="True" time="0.0907" asserts="0" description="module manifest 'PsLogMessage.psd1'.- Validation">
                <results>
                  <test-case description="is a valid manifest" name="module manifest 'PsLogMessage.psd1'.- Validation.is a valid manifest" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid name in the manifest" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid name in the manifest" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid root module" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid root module" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid version" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid version" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid description" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid description" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid author" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid author" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid guid" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid guid" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid copyright" name="module manifest 'PsLogMessage.psd1'.- Validation.has a valid copyright" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Git tagging" executed="True" result="Ignored" success="True" time="0.1381" asserts="0" description="Git tagging">
            <results>
              <test-suite type="TestFixture" name="Git tagging.- Git tag version ''" executed="True" result="Ignored" success="True" time="0.0245" asserts="0" description="Git tagging.- Git tag version ''">
                <results>
                  <test-case description="is a valid version" name="Git tagging.- Git tag version ''.is a valid version" time="0.0104" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="matches the module manifest version" name="Git tagging.- Git tag version ''.matches the module manifest version" time="0.0032" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Metadata.tests.ps1" executed="True" result="Success" success="True" time="0.2623" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Metadata.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="text files" executed="True" result="Success" success="True" time="0.0504" asserts="0" description="text files">
            <results>
              <test-suite type="TestFixture" name="text files.- File Encoding" executed="True" result="Success" success="True" time="0.0163" asserts="0" description="text files.- File Encoding">
                <results>
                  <test-case description="do not use Unicode/UTF-16 encoding" name="text files.- File Encoding.do not use Unicode/UTF-16 encoding" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="text files.- Indentations" executed="True" result="Success" success="True" time="0.0395" asserts="0" description="text files.- Indentations">
                <results>
                  <test-case description="do not use tabs for indentations" name="text files.- Indentations.do not use tabs for indentations" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Module.tests.ps1" executed="True" result="Success" success="True" time="0.1551" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Module.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PowerShell files in module 'PsLogMessage'" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="PowerShell files in module 'PsLogMessage'">
            <results>
              <test-suite type="ParameterizedTest" name="PowerShell files in module 'PsLogMessage'.'&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="'&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\dist\1.0.103\PsLogMessage\PsLogMessage.psd1' can be tokenized by the PowerShell parser without any errors" name="PowerShell files in module 'PsLogMessage'.'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\dist\1.0.103\PsLogMessage\PsLogMessage.psd1' can be tokenized by the PowerShell parser without any errors" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\dist\1.0.103\PsLogMessage\PsLogMessage.psm1' can be tokenized by the PowerShell parser without any errors" name="PowerShell files in module 'PsLogMessage'.'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\dist\1.0.103\PsLogMessage\PsLogMessage.psm1' can be tokenized by the PowerShell parser without any errors" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="module 'PsLogMessage'" executed="True" result="Success" success="True" time="0.0802" asserts="0" description="module 'PsLogMessage'">
            <results>
              <test-suite type="ParameterizedTest" name="module 'PsLogMessage'.can be imported without any errors" executed="True" result="Success" success="True" time="0.0144" asserts="0" description="can be imported without any errors">
                <results>
                  <test-case description="can be imported without any errors" name="module 'PsLogMessage'.can be imported without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\dist\1.0.103\PsLogMessage\PsLogMessage.psm1&quot;)" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Project.tests.ps1" executed="True" result="Success" success="True" time="0.2219" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\PsLogMessage\tests\Project.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="change log" executed="True" result="Success" success="True" time="0.0309" asserts="0" description="change log">
            <results>
              <test-suite type="TestFixture" name="change log.- Version" executed="True" result="Success" success="True" time="0.0252" asserts="0" description="change log.- Version">
                <results>
                  <test-case description="has a valid version" name="change log.- Version.has a valid version" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the same version as the manifest" name="change log.- Version.has the same version as the manifest" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>